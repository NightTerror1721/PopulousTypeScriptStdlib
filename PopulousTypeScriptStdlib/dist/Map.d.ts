/** @noSelfInFile */
import "./PopModules";
import { Location } from "./Location";
import { ThingType } from "./Things";
export type MapCell = [x: number, z: number];
export declare namespace Map {
    function getCellComponentsFromLocation(location: Location): LuaMultiReturn<[number, number]>;
    function getCellComponents(cell: MapCell | Location): LuaMultiReturn<[number, number]>;
    function toCell(location: Location): MapCell;
    function cellToLocation(cell: MapCell): Location;
    function isLand(location: Location): boolean;
    function isSea(location: Location): boolean;
    function isSubCellWalkableInDirection(cell: MapCell | Location, direction: number): boolean;
    function isSubCellWalkableInDirection(x: number, z: number, direction: number): boolean;
    function isCellFlatAndLand(cellIdx: number): boolean;
    function isCellFlat(cellIdx: number): boolean;
    function isCellLand(cellIdx: number): boolean;
    function isCellNearCost(cellIdx: number, radius: number): boolean;
    function getWorldDistance<T extends Location | number>(loc1: T, loc2: T): number;
    function getMaxAltitudeDifferenceFor(loc: Location | number): number;
    function getElement(loc: Location | MapCell): MapElement;
    function getElement(x: number, z: number): MapElement;
    function asLoc2D(elem: MapElement): Location;
    function asLoc2D(idx: number): Location;
    function asLoc2DCenter(elem: MapElement): Location;
    function asLoc2DCenter(idx: number): Location;
    function asLoc3D(elem: MapElement): Location;
    function asLoc3D(idx: number): Location;
    function asLoc3DCenter(elem: MapElement): Location;
    function asLoc3DCenter(idx: number): Location;
    function isCoastElement(elem: MapElement): boolean;
    function isAllLandElement(elem: MapElement): boolean;
    function isAllSeaElement(elem: MapElement): boolean;
    function isSeaOrCoastElement(elem: MapElement): boolean;
    function isLandOrCoastElement(elem: MapElement): boolean;
    function isAtCellCenter(loc: Location): boolean;
    function isCellObstacleFree(cellIdx: number): boolean;
    function isThingOnGround(thing: Thing): boolean;
    function isLocationOnGround(loc: Location): boolean;
    function isPointTooSteepForMovingThing(loc: Location, thing: Thing): boolean;
    function areLocationsOnSameMapCell(loc1: Location, loc2: Location): boolean;
    function setElementOwner(elem: MapElement, tribe: TribeID): void;
    function validateThingLocation(loc: Location, thing: Thing): Location;
    function setElementLavaNum(elem: MapElement, num: number): void;
    function getElementLavaNum(elem: MapElement): number;
    function getAltitude(x: number, z: number): number;
    function getAltitude(loc: Location): number;
    function getAltitudeWithObjects(x: number, z: number): number;
    function getAltitudeWithObjects(loc: Location): number;
    function getCellIndex(position: number): number;
    function getCellIndex(loc: Location): number;
    function search(shape: SearchShapeType, radius: number, loc: Location, action: (this: void, elem: MapElement) => boolean): void;
    function search(shape: SearchShapeType, radius: number, elem: MapElement, action: (this: void, elem: MapElement) => boolean): void;
    function findFirstThingOf(type: ThingType, model: number, x: number, z: number, radius?: number, shape?: SearchShapeType): Thing | undefined;
    function findFirstThingOf(type: ThingType, model: number, loc: Location, radius?: number, shape?: SearchShapeType): Thing | undefined;
}
export declare namespace FOW {
    function uncover(tribe: TribeID, radius: number, x: number, z: number): void;
    function uncover(tribe: TribeID, radius: number, elem: MapElement): void;
    function uncover(tribe: TribeID, radius: number, loc: Location): void;
    function uncoverPermanent(tribe: TribeID, radius: number, x: number, z: number): void;
    function uncoverPermanent(tribe: TribeID, radius: number, elem: MapElement): void;
    function uncoverPermanent(tribe: TribeID, radius: number, loc: Location): void;
    function clearUncoverPermanent(tribe: TribeID, radius: number, x: number, z: number): void;
    function clearUncoverPermanent(tribe: TribeID, radius: number, elem: MapElement): void;
    function clearUncoverPermanent(tribe: TribeID, radius: number, loc: Location): void;
    function uncoverForAllPlayers(radius: number, x: number, z: number): void;
    function uncoverForAllPlayers(radius: number, elem: MapElement): void;
    function uncoverForAllPlayers(radius: number, loc: Location): void;
    function uncoverPermanentForAllPlayers(radius: number, x: number, z: number): void;
    function uncoverPermanentForAllPlayers(radius: number, elem: MapElement): void;
    function uncoverPermanentForAllPlayers(radius: number, loc: Location): void;
    function clearUncoverPermanentForAllPlayers(radius: number, x: number, z: number): void;
    function clearUncoverPermanentForAllPlayers(radius: number, elem: MapElement): void;
    function clearUncoverPermanentForAllPlayers(radius: number, loc: Location): void;
    function isElementUncovered(elem: MapElement): boolean;
}
