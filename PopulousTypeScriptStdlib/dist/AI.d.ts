import "./PopModules";
import { BuildingOrientation } from "./Buildings";
import { Marker, RawMarker } from "./Markers";
import { Spell } from "./Spells";
import { BuildingModel, PersonModel, SpellModel, VehicleModel } from "./Things";
import { Location } from "./Location";
import { MapCell } from "./Map";
import { Time } from "./GameTime";
import { LocalDataArray } from "./Serialization";
export declare class AI {
    readonly tribe: TribeID;
    readonly attributes: AI.Attributes;
    readonly states: AI.States;
    private readonly _player;
    private readonly _cache;
    constructor(tribe: TribeID);
    resetBaseMarker(): void;
    setBaseMarker(marker: RawMarker): void;
    isShamanInArea(marker: RawMarker, radius: number): boolean;
    get numPeopleBeingPreached(): number;
    deselectAllPeople(): void;
    get giveUpAndSulk(): boolean;
    set giveUpAndSulk(value: boolean);
    get delayMainDrumTower(): boolean;
    set delayMainDrumTower(value: boolean);
    get numPeopleInHouses(): number;
    startReincNow(): void;
    get attackVariable(): number;
    set attackVariable(value: number);
    attack(targetTribe: TribeID, people: number, targetType: PopScriptAttackTargetType, damage: number, targetModel?: PersonModel | BuildingModel, spell1?: SpellModel, spell2?: SpellModel, spell3?: SpellModel, attackType?: PopScriptAttackType, lookAfter?: number, marker1?: RawMarker, marker2?: RawMarker, direction?: number): boolean;
    attack(params: AI.AttackParameters): boolean;
    setMarkerEntry(entry: number, marker1: RawMarker, marker2?: RawMarker, numBraves?: number, numWarriors?: number, numSuperWarriors?: number, numPreachers?: number): void;
    setMarkerEntry(props: AI.MarkerEntryParameters): void;
    executeMarkerEntries(entry: number, entry2?: number, entry3?: number, entry4?: number): void;
    executeMarkerEntries(entries: number[]): void;
    callToArms(): void;
    marvellousHouseDeath(): void;
    get defenseRadius(): number;
    set defenseRadius(value: number);
    get isReincEnabled(): boolean;
    get reinc(): boolean;
    set reinc(value: boolean);
    get isBucketUsageEnabled(): boolean;
    get bucketUsage(): boolean;
    set bucketUsage(value: boolean);
    get isExtraGoodCollectionEnabled(): boolean;
    get extraGoodCollection(): boolean;
    set extraGoodCollection(value: boolean);
    setExtraWoodCollectionRadii(min: number, max: number, x: number, z: number): void;
    setExtraWoodCollectionRadii(min: number, max: number, location: Location): void;
    setBucketCountForSpell(spell: SpellModel, multiplier: number): void;
    get countWithBuildCommand(): number;
    clearHouseInfoFlag(): void;
    get shapesCount(): number;
    sendPeopleToMarker(marker: RawMarker): void;
    trackShamanExtraBollocks(angle: number): void;
    navCheck(tribeTarget: TribeID, targetType: PopScriptAttackTargetType, targetModel?: PersonModel | BuildingModel, remember?: number): boolean;
    get isOnlyStandAtMarkersEnabled(): boolean;
    get onlyStandAtMarkers(): boolean;
    set onlyStandAtMarkers(value: boolean);
    clearGuardingFrom(entry: number, entry2?: number, entry3?: number, entry4?: number): void;
    clearGuardingFrom(entries: number[]): void;
    defendShamen(numPeople: number): void;
    sendShamenDefendersHome(): void;
    executeBoardPatrol(vehicleType: VehicleModel, numPeople: number, marker1: RawMarker, marker2?: RawMarker, marker3?: RawMarker, marker4?: RawMarker): void;
    prayAtHead(numPeople: number, marker: RawMarker): void;
    populateDrumTower(model: PersonModel, x: number, z: number): void;
    populateDrumTower(model: PersonModel, location: Location): void;
    get buildingDirection(): BuildingOrientation;
    set buildingDirection(value: BuildingOrientation | undefined);
    get baseRadius(): number;
    set baseRadius(value: number);
    getNumPeopleInMarker(targetTribe: TribeID, marker: RawMarker, radius: number): number;
    get mainDrumTowerLocation(): Location;
    set mainDrumTowerLocation(value: Location | MapCell | Marker);
    convertAtMarker(marker: RawMarker): void;
    preachAtMarker(marker: RawMarker): void;
    sendAllPeopleToMarker(marker: RawMarker): void;
    setGuardBetweenMarkers(marker1: RawMarker, marker2: RawMarker, braves?: number, warriors?: number, superWarriors?: number, preachers?: number, useGhosts?: boolean): void;
    buildDrumTower(x: number, z: number): void;
    buildDrumTower(location: Location): void;
    sendGhostPeople(num: number): void;
    get hasHouseInfoBeenShown(): boolean;
    get targetDrumTowers(): boolean;
    set targetDrumTowers(value: boolean);
    get targetSuperWarriors(): boolean;
    set targetSuperWarriors(value: boolean);
    get freeEntries(): number;
    get numShamenDefenders(): number;
    updateBuckets(deltaTime: Time, evertTurns?: number, maxPeopleWithTurbo?: number): void;
    initComputer(): void;
    setComputerBaseLocation(x: number, z: number): void;
    setComputerBaseLocation(location: Location): void;
    setInitialCommand(): void;
    destroyReinc(): void;
    get shamanDefendBaseLocation(): Location;
    set shamanDefendBaseLocation(value: Location | MapCell | Marker | undefined);
    setSpellEntry(entry: number, spell: Spell | SpellModel, minMana: number, frequency: number, minPeople: number, baseSpell: boolean): void;
    setSpellEntry(entry: number, spell: Spell | SpellModel, frequency: number, minPeople: number, baseSpell: boolean): void;
}
export declare namespace AI {
    interface AttackParameters {
        targetTribe: TribeID;
        people: number;
        targetType: PopScriptAttackTargetType;
        damage: number;
        targetModel?: PersonModel | BuildingModel;
        spell1?: SpellModel;
        spell2?: SpellModel;
        spell3?: SpellModel;
        attackType?: PopScriptAttackType;
        lookAfter?: number;
        marker1?: RawMarker;
        marker2?: RawMarker;
        direction?: number;
    }
    interface MarkerEntryParameters {
        entry: number;
        marker1: RawMarker;
        marker2?: RawMarker;
        braves?: number;
        warriors?: number;
        superWarriors?: number;
        preachers?: number;
    }
    class Attributes {
        private readonly _tribe;
        constructor(tribe: TribeID);
        private setAttribute;
        private getAttribute;
        exportData(): LocalDataArray;
        importData(data: LocalDataArray): void;
        get expansion(): number;
        get prefSpyTrains(): number;
        get prefReligiousTrains(): number;
        get prefWarriorTrains(): number;
        get prefSuperWarriorTrains(): number;
        get prefSpyPeople(): number;
        get prefReligiousPeople(): number;
        get prefWarriorPeople(): number;
        get prefSuperWarriorPeople(): number;
        get maxBuildingsOnGo(): number;
        get housePercentage(): number;
        get awayBrave(): number;
        get awayWarrior(): number;
        get awayReligious(): number;
        get defenseRadIncr(): number;
        get maxDefensiveActions(): number;
        get awaySpy(): number;
        get awaySuperWarrior(): number;
        get attackPercentage(): number;
        get awayShaman(): number;
        get peoplePerBoat(): number;
        get peoplePerBalloon(): number;
        get dontUseBoats(): number;
        get maxSpyAttacks(): number;
        get enemySpyMaxStand(): number;
        get maxAttacks(): number;
        get emptyAtWaypoint(): number;
        get spyCheckFrequency(): number;
        get retreatValue(): number;
        get baseUnderAttackRetreat(): number;
        get randomBuildSide(): number;
        get usePreacherForDefense(): number;
        get shamenBlast(): number;
        get maxTrainAtOnce(): number;
        get groupOption(): number;
        get prefBoatHuts(): number;
        get prefBalloonHuts(): number;
        get prefBoatDrivers(): number;
        get prefBalloonDrivers(): number;
        get fightStopDistance(): number;
        get spyDiscoverChance(): number;
        get countPreachDamage(): number;
        get dontGroupAtDT(): number;
        get spellDelay(): number;
        get dontDeleteUselessBoatHouse(): number;
        get boatHouseBroken(): number;
        get dontAutoTrainPreachers(): number;
        get spare6(): number;
        set expansion(value: number);
        set prefSpyTrains(value: number);
        set prefReligiousTrains(value: number);
        set prefWarriorTrains(value: number);
        set prefSuperWarriorTrains(value: number);
        set prefSpyPeople(value: number);
        set prefReligiousPeople(value: number);
        set prefWarriorPeople(value: number);
        set prefSuperWarriorPeople(value: number);
        set maxBuildingsOnGo(value: number);
        set housePercentage(value: number);
        set awayBrave(value: number);
        set awayWarrior(value: number);
        set awayReligious(value: number);
        set defenseRadIncr(value: number);
        set maxDefensiveActions(value: number);
        set awaySpy(value: number);
        set awaySuperWarrior(value: number);
        set attackPercentage(value: number);
        set awayShaman(value: number);
        set peoplePerBoat(value: number);
        set peoplePerBalloon(value: number);
        set dontUseBoats(value: number);
        set maxSpyAttacks(value: number);
        set enemySpyMaxStand(value: number);
        set maxAttacks(value: number);
        set emptyAtWaypoint(value: number);
        set spyCheckFrequency(value: number);
        set retreatValue(value: number);
        set baseUnderAttackRetreat(value: number);
        set randomBuildSide(value: number);
        set usePreacherForDefense(value: number);
        set shamenBlast(value: number);
        set maxTrainAtOnce(value: number);
        set groupOption(value: number);
        set prefBoatHuts(value: number);
        set prefBalloonHuts(value: number);
        set prefBoatDrivers(value: number);
        set prefBalloonDrivers(value: number);
        set fightStopDistance(value: number);
        set spyDiscoverChance(value: number);
        set countPreachDamage(value: number);
        set dontGroupAtDT(value: number);
        set spellDelay(value: number);
        set dontDeleteUselessBoatHouse(value: number);
        set boatHouseBroken(value: number);
        set dontAutoTrainPreachers(value: number);
        set spare6(value: number);
    }
    class States {
        private readonly _tribe;
        private readonly _cache;
        constructor(tribe: TribeID);
        private setState;
        private getState;
        exportData(): LocalDataArray;
        importData(data: LocalDataArray): void;
        get constructBuilding(): boolean;
        get fetchWood(): boolean;
        get shamanGetWildPreeps(): boolean;
        get houseAPerson(): boolean;
        get sendGhosts(): boolean;
        get bringNewPeopleBack(): boolean;
        get trainPeople(): boolean;
        get populateDrumTower(): boolean;
        get defend(): boolean;
        get defendBase(): boolean;
        get spellDefence(): boolean;
        get preach(): boolean;
        get buildWalls(): boolean;
        get sabotage(): boolean;
        get spellOffensive(): boolean;
        get superDefend(): boolean;
        get buildVehicle(): boolean;
        get fetchLostPeople(): boolean;
        get fetchLostVehicle(): boolean;
        get fetchFarVehicle(): boolean;
        get autoAttack(): boolean;
        get shamanDefend(): boolean;
        get flattenBase(): boolean;
        get buildOuterDefences(): boolean;
        get guardAtMarker(): boolean;
        get sendAllToMarker(): boolean;
        get prayAtHead(): boolean;
        get boatPatrol(): boolean;
        get defendShamen(): boolean;
        set constructBuilding(value: boolean);
        set fetchWood(value: boolean);
        set shamanGetWildPreeps(value: boolean);
        set houseAPerson(value: boolean);
        set sendGhosts(value: boolean);
        set bringNewPeopleBack(value: boolean);
        set trainPeople(value: boolean);
        set populateDrumTower(value: boolean);
        set defend(value: boolean);
        set defendBase(value: boolean);
        set spellDefence(value: boolean);
        set preach(value: boolean);
        set buildWalls(value: boolean);
        set sabotage(value: boolean);
        set spellOffensive(value: boolean);
        set superDefend(value: boolean);
        set buildVehicle(value: boolean);
        set fetchLostPeople(value: boolean);
        set fetchLostVehicle(value: boolean);
        set fetchFarVehicle(value: boolean);
        set autoAttack(value: boolean);
        set shamanDefend(value: boolean);
        set flattenBase(value: boolean);
        set buildOuterDefences(value: boolean);
        set guardAtMarker(value: boolean);
        set sendAllToMarker(value: boolean);
        set prayAtHead(value: boolean);
        set boatPatrol(value: boolean);
        set defendShamen(value: boolean);
    }
}
